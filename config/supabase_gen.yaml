# Remote database configuration - uncomment and fill in details to use remote mode
database:
  connection_type: remote
  supabase_url: https://snyslzlivseztldymgzm.supabase.co
  supabase_key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNueXNsemxpdnNlenRsZHltZ3ptIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0Njc5ODIyNSwiZXhwIjoyMDYyMzc0MjI1fQ.2L6I1FvfvhrhFoB9FrRv32MV42jDok_S9IIW5Wrzap4
  database: postgres  # Database name is still required even for remote connection


generation:
  output_directory: generated/
  model_prefix: ''
  model_suffix: Model
  repository_suffix: Repository
  
  # Tables to probe when using remote connection
  probe_tables:
    # Application tables
    - 'users'
    - 'games'
    - 'notifications'
    - 'player_stats'
    - 'chat_messages'
    - 'chat_rooms'
    - 'game_players'
    - 'match_events'
    - 'match_highlights'
    - 'match_results'
    - 'player_skills'
    
    # Test tables for relationships
    - 'users'
    - 'games'
    - 'game_players'
    
  exclude_tables: 
    # Exclude system schemas
    - '_realtime.*'
    - 'auth.*'
    - 'net.*'
    - 'pgsodium.*'
    - 'realtime.*'
    - 'storage.*'
    - 'supabase_functions.*'
    - 'vault.*'
    # Exclude views and system tables from public schema
    - 'public.*_view'
    # Exclude postgis system tables
    - 'spatial_ref_sys'
    - 'geography_columns'
    - 'geometry_columns'
    
  include_tables: 
    - 'public.*'  # Include all tables from public schema
  
  generate_for_all_tables: false  # Only generate for explicitly included tables
  use_null_safety: true

  # NEW: Provider generation options
  providers:
    # Set to true to enable generation of Riverpod providers
    generate: true
    
    # Provider naming conventions
    suffix: Provider
    
    # State management options
    type: riverpod  # Currently only riverpod is supported
    
    # Use AppException class for error handling
    # If true, imports AppException from core/errors/app_exception.dart
    use_app_exception: true
    
    # Whether providers should use keepAlive to persist state
    # When set to false, providers will be auto-disposed when no longer used
    use_keep_alive: false
    
    # Whether to auto-invalidate providers on data changes
    # When true, notifiers will refresh their state after CRUD operations
    invalidate_on_change: true
    
    # Generate AsyncValueWidget for easy UI consumption
    # Creates a standard widget for handling async states in shared/widgets/
    generate_async_value_widget: true